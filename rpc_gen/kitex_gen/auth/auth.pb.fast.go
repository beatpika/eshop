// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package auth

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GenerateTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenerateTokenRequest[number], err)
}

func (x *GenerateTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GenerateTokenRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Role = UserRole(v)
	return offset, nil
}

func (x *GenerateTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenerateTokenResponse[number], err)
}

func (x *GenerateTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ExpiresAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GenerateTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ErrorCode = ErrorCode(v)
	return offset, nil
}

func (x *GenerateTokenResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ErrorMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VerifyTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_VerifyTokenRequest[number], err)
}

func (x *VerifyTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *VerifyTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_VerifyTokenResponse[number], err)
}

func (x *VerifyTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.IsValid, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *VerifyTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *VerifyTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Role = UserRole(v)
	return offset, nil
}

func (x *VerifyTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Permissions = append(x.Permissions, v)
	return offset, err
}

func (x *VerifyTokenResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ExpiresAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *VerifyTokenResponse) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ErrorCode = ErrorCode(v)
	return offset, nil
}

func (x *VerifyTokenResponse) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.ErrorMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshTokenRequest[number], err)
}

func (x *RefreshTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RefreshTokenResponse[number], err)
}

func (x *RefreshTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AccessToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.RefreshToken, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ExpiresAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RefreshTokenResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ErrorCode = ErrorCode(v)
	return offset, nil
}

func (x *RefreshTokenResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ErrorMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RevokeTokenRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RevokeTokenRequest[number], err)
}

func (x *RevokeTokenRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RevokeTokenResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RevokeTokenResponse[number], err)
}

func (x *RevokeTokenResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Success, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *RevokeTokenResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ErrorCode = ErrorCode(v)
	return offset, nil
}

func (x *RevokeTokenResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ErrorMessage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenerateTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GenerateTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GenerateTokenRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetRole()))
	return offset
}

func (x *GenerateTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GenerateTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRefreshToken())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.ExpiresAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetExpiresAt())
	return offset
}

func (x *GenerateTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if x.ErrorCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetErrorCode()))
	return offset
}

func (x *GenerateTokenResponse) fastWriteField5(buf []byte) (offset int) {
	if x.ErrorMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetErrorMessage())
	return offset
}

func (x *VerifyTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *VerifyTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *VerifyTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *VerifyTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.IsValid {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetIsValid())
	return offset
}

func (x *VerifyTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *VerifyTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Role == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetRole()))
	return offset
}

func (x *VerifyTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if len(x.Permissions) == 0 {
		return offset
	}
	for i := range x.GetPermissions() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetPermissions()[i])
	}
	return offset
}

func (x *VerifyTokenResponse) fastWriteField5(buf []byte) (offset int) {
	if x.ExpiresAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetExpiresAt())
	return offset
}

func (x *VerifyTokenResponse) fastWriteField6(buf []byte) (offset int) {
	if x.ErrorCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetErrorCode()))
	return offset
}

func (x *VerifyTokenResponse) fastWriteField7(buf []byte) (offset int) {
	if x.ErrorMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetErrorMessage())
	return offset
}

func (x *RefreshTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RefreshTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetRefreshToken())
	return offset
}

func (x *RefreshTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *RefreshTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if x.AccessToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAccessToken())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.RefreshToken == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetRefreshToken())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.ExpiresAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetExpiresAt())
	return offset
}

func (x *RefreshTokenResponse) fastWriteField4(buf []byte) (offset int) {
	if x.ErrorCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetErrorCode()))
	return offset
}

func (x *RefreshTokenResponse) fastWriteField5(buf []byte) (offset int) {
	if x.ErrorMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetErrorMessage())
	return offset
}

func (x *RevokeTokenRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RevokeTokenRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetToken())
	return offset
}

func (x *RevokeTokenResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *RevokeTokenResponse) fastWriteField1(buf []byte) (offset int) {
	if !x.Success {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetSuccess())
	return offset
}

func (x *RevokeTokenResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ErrorCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetErrorCode()))
	return offset
}

func (x *RevokeTokenResponse) fastWriteField3(buf []byte) (offset int) {
	if x.ErrorMessage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetErrorMessage())
	return offset
}

func (x *GenerateTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GenerateTokenRequest) sizeField1() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetUserId())
	return n
}

func (x *GenerateTokenRequest) sizeField2() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetRole()))
	return n
}

func (x *GenerateTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GenerateTokenResponse) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *GenerateTokenResponse) sizeField2() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRefreshToken())
	return n
}

func (x *GenerateTokenResponse) sizeField3() (n int) {
	if x.ExpiresAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetExpiresAt())
	return n
}

func (x *GenerateTokenResponse) sizeField4() (n int) {
	if x.ErrorCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetErrorCode()))
	return n
}

func (x *GenerateTokenResponse) sizeField5() (n int) {
	if x.ErrorMessage == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetErrorMessage())
	return n
}

func (x *VerifyTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *VerifyTokenRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *VerifyTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *VerifyTokenResponse) sizeField1() (n int) {
	if !x.IsValid {
		return n
	}
	n += fastpb.SizeBool(1, x.GetIsValid())
	return n
}

func (x *VerifyTokenResponse) sizeField2() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetUserId())
	return n
}

func (x *VerifyTokenResponse) sizeField3() (n int) {
	if x.Role == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetRole()))
	return n
}

func (x *VerifyTokenResponse) sizeField4() (n int) {
	if len(x.Permissions) == 0 {
		return n
	}
	for i := range x.GetPermissions() {
		n += fastpb.SizeString(4, x.GetPermissions()[i])
	}
	return n
}

func (x *VerifyTokenResponse) sizeField5() (n int) {
	if x.ExpiresAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetExpiresAt())
	return n
}

func (x *VerifyTokenResponse) sizeField6() (n int) {
	if x.ErrorCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetErrorCode()))
	return n
}

func (x *VerifyTokenResponse) sizeField7() (n int) {
	if x.ErrorMessage == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetErrorMessage())
	return n
}

func (x *RefreshTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RefreshTokenRequest) sizeField1() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetRefreshToken())
	return n
}

func (x *RefreshTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *RefreshTokenResponse) sizeField1() (n int) {
	if x.AccessToken == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAccessToken())
	return n
}

func (x *RefreshTokenResponse) sizeField2() (n int) {
	if x.RefreshToken == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetRefreshToken())
	return n
}

func (x *RefreshTokenResponse) sizeField3() (n int) {
	if x.ExpiresAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetExpiresAt())
	return n
}

func (x *RefreshTokenResponse) sizeField4() (n int) {
	if x.ErrorCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetErrorCode()))
	return n
}

func (x *RefreshTokenResponse) sizeField5() (n int) {
	if x.ErrorMessage == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetErrorMessage())
	return n
}

func (x *RevokeTokenRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RevokeTokenRequest) sizeField1() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetToken())
	return n
}

func (x *RevokeTokenResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *RevokeTokenResponse) sizeField1() (n int) {
	if !x.Success {
		return n
	}
	n += fastpb.SizeBool(1, x.GetSuccess())
	return n
}

func (x *RevokeTokenResponse) sizeField2() (n int) {
	if x.ErrorCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetErrorCode()))
	return n
}

func (x *RevokeTokenResponse) sizeField3() (n int) {
	if x.ErrorMessage == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetErrorMessage())
	return n
}

var fieldIDToName_GenerateTokenRequest = map[int32]string{
	1: "UserId",
	2: "Role",
}

var fieldIDToName_GenerateTokenResponse = map[int32]string{
	1: "AccessToken",
	2: "RefreshToken",
	3: "ExpiresAt",
	4: "ErrorCode",
	5: "ErrorMessage",
}

var fieldIDToName_VerifyTokenRequest = map[int32]string{
	1: "Token",
}

var fieldIDToName_VerifyTokenResponse = map[int32]string{
	1: "IsValid",
	2: "UserId",
	3: "Role",
	4: "Permissions",
	5: "ExpiresAt",
	6: "ErrorCode",
	7: "ErrorMessage",
}

var fieldIDToName_RefreshTokenRequest = map[int32]string{
	1: "RefreshToken",
}

var fieldIDToName_RefreshTokenResponse = map[int32]string{
	1: "AccessToken",
	2: "RefreshToken",
	3: "ExpiresAt",
	4: "ErrorCode",
	5: "ErrorMessage",
}

var fieldIDToName_RevokeTokenRequest = map[int32]string{
	1: "Token",
}

var fieldIDToName_RevokeTokenResponse = map[int32]string{
	1: "Success",
	2: "ErrorCode",
	3: "ErrorMessage",
}
