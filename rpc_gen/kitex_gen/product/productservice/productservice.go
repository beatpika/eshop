// Code generated by Kitex v0.9.1. DO NOT EDIT.

package productservice

import (
	"context"
	"errors"
	product "github.com/beatpika/eshop/rpc_gen/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateProduct": kitex.NewMethodInfo(
		createProductHandler,
		newCreateProductArgs,
		newCreateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newUpdateProductArgs,
		newUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetProduct": kitex.NewMethodInfo(
		getProductHandler,
		newGetProductArgs,
		newGetProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListProducts": kitex.NewMethodInfo(
		listProductsHandler,
		newListProductsArgs,
		newListProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newDeleteProductArgs,
		newDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateProductStatus": kitex.NewMethodInfo(
		updateProductStatusHandler,
		newUpdateProductStatusArgs,
		newUpdateProductStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateSKU": kitex.NewMethodInfo(
		createSKUHandler,
		newCreateSKUArgs,
		newCreateSKUResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateSKU": kitex.NewMethodInfo(
		updateSKUHandler,
		newUpdateSKUArgs,
		newUpdateSKUResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteSKU": kitex.NewMethodInfo(
		deleteSKUHandler,
		newDeleteSKUArgs,
		newDeleteSKUResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateSKUStock": kitex.NewMethodInfo(
		updateSKUStockHandler,
		newUpdateSKUStockArgs,
		newUpdateSKUStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateCategory": kitex.NewMethodInfo(
		createCategoryHandler,
		newCreateCategoryArgs,
		newCreateCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateCategory": kitex.NewMethodInfo(
		updateCategoryHandler,
		newUpdateCategoryArgs,
		newUpdateCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteCategory": kitex.NewMethodInfo(
		deleteCategoryHandler,
		newDeleteCategoryArgs,
		newDeleteCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListCategories": kitex.NewMethodInfo(
		listCategoriesHandler,
		newListCategoriesArgs,
		newListCategoriesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetCategoryTree": kitex.NewMethodInfo(
		getCategoryTreeHandler,
		newGetCategoryTreeArgs,
		newGetCategoryTreeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchProducts": kitex.NewMethodInfo(
		searchProductsHandler,
		newSearchProductsArgs,
		newSearchProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetProductsByCategory": kitex.NewMethodInfo(
		getProductsByCategoryHandler,
		newGetProductsByCategoryArgs,
		newGetProductsByCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productServiceServiceInfo                = NewServiceInfo()
	productServiceServiceInfoForClient       = NewServiceInfoForClient()
	productServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.CreateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).CreateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateProductArgs:
		success, err := handler.(product.ProductService).CreateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateProductArgs() interface{} {
	return &CreateProductArgs{}
}

func newCreateProductResult() interface{} {
	return &CreateProductResult{}
}

type CreateProductArgs struct {
	Req *product.CreateProductReq
}

func (p *CreateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.CreateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateProductArgs) Unmarshal(in []byte) error {
	msg := new(product.CreateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateProductArgs_Req_DEFAULT *product.CreateProductReq

func (p *CreateProductArgs) GetReq() *product.CreateProductReq {
	if !p.IsSetReq() {
		return CreateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateProductResult struct {
	Success *product.CreateProductResp
}

var CreateProductResult_Success_DEFAULT *product.CreateProductResp

func (p *CreateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.CreateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateProductResult) Unmarshal(in []byte) error {
	msg := new(product.CreateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateProductResult) GetSuccess() *product.CreateProductResp {
	if !p.IsSetSuccess() {
		return CreateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.CreateProductResp)
}

func (p *CreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateProductArgs:
		success, err := handler.(product.ProductService).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *product.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *product.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *product.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *product.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *product.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *product.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetProductArgs:
		success, err := handler.(product.ProductService).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetProductArgs() interface{} {
	return &GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &GetProductResult{}
}

type GetProductArgs struct {
	Req *product.GetProductReq
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	msg := new(product.GetProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductArgs_Req_DEFAULT *product.GetProductReq

func (p *GetProductArgs) GetReq() *product.GetProductReq {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductResult struct {
	Success *product.GetProductResp
}

var GetProductResult_Success_DEFAULT *product.GetProductResp

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	msg := new(product.GetProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *product.GetProductResp {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetProductResp)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func listProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.ListProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).ListProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListProductsArgs:
		success, err := handler.(product.ProductService).ListProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListProductsArgs() interface{} {
	return &ListProductsArgs{}
}

func newListProductsResult() interface{} {
	return &ListProductsResult{}
}

type ListProductsArgs struct {
	Req *product.ListProductsReq
}

func (p *ListProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.ListProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.ListProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListProductsArgs_Req_DEFAULT *product.ListProductsReq

func (p *ListProductsArgs) GetReq() *product.ListProductsReq {
	if !p.IsSetReq() {
		return ListProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListProductsResult struct {
	Success *product.ListProductsResp
}

var ListProductsResult_Success_DEFAULT *product.ListProductsResp

func (p *ListProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.ListProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListProductsResult) Unmarshal(in []byte) error {
	msg := new(product.ListProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListProductsResult) GetSuccess() *product.ListProductsResp {
	if !p.IsSetSuccess() {
		return ListProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.ListProductsResp)
}

func (p *ListProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListProductsResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteProductArgs:
		success, err := handler.(product.ProductService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *product.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(product.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *product.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *product.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *product.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *product.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(product.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *product.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateProductStatusReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).UpdateProductStatus(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateProductStatusArgs:
		success, err := handler.(product.ProductService).UpdateProductStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductStatusResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateProductStatusArgs() interface{} {
	return &UpdateProductStatusArgs{}
}

func newUpdateProductStatusResult() interface{} {
	return &UpdateProductStatusResult{}
}

type UpdateProductStatusArgs struct {
	Req *product.UpdateProductStatusReq
}

func (p *UpdateProductStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateProductStatusReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductStatusArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductStatusReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductStatusArgs_Req_DEFAULT *product.UpdateProductStatusReq

func (p *UpdateProductStatusArgs) GetReq() *product.UpdateProductStatusReq {
	if !p.IsSetReq() {
		return UpdateProductStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductStatusResult struct {
	Success *product.UpdateProductStatusResp
}

var UpdateProductStatusResult_Success_DEFAULT *product.UpdateProductStatusResp

func (p *UpdateProductStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateProductStatusResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductStatusResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductStatusResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductStatusResult) GetSuccess() *product.UpdateProductStatusResp {
	if !p.IsSetSuccess() {
		return UpdateProductStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateProductStatusResp)
}

func (p *UpdateProductStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductStatusResult) GetResult() interface{} {
	return p.Success
}

func createSKUHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.CreateSKUReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).CreateSKU(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateSKUArgs:
		success, err := handler.(product.ProductService).CreateSKU(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateSKUResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateSKUArgs() interface{} {
	return &CreateSKUArgs{}
}

func newCreateSKUResult() interface{} {
	return &CreateSKUResult{}
}

type CreateSKUArgs struct {
	Req *product.CreateSKUReq
}

func (p *CreateSKUArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.CreateSKUReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateSKUArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateSKUArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateSKUArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateSKUArgs) Unmarshal(in []byte) error {
	msg := new(product.CreateSKUReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateSKUArgs_Req_DEFAULT *product.CreateSKUReq

func (p *CreateSKUArgs) GetReq() *product.CreateSKUReq {
	if !p.IsSetReq() {
		return CreateSKUArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateSKUArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateSKUArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateSKUResult struct {
	Success *product.CreateSKUResp
}

var CreateSKUResult_Success_DEFAULT *product.CreateSKUResp

func (p *CreateSKUResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.CreateSKUResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateSKUResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateSKUResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateSKUResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateSKUResult) Unmarshal(in []byte) error {
	msg := new(product.CreateSKUResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateSKUResult) GetSuccess() *product.CreateSKUResp {
	if !p.IsSetSuccess() {
		return CreateSKUResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateSKUResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.CreateSKUResp)
}

func (p *CreateSKUResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateSKUResult) GetResult() interface{} {
	return p.Success
}

func updateSKUHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateSKUReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).UpdateSKU(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateSKUArgs:
		success, err := handler.(product.ProductService).UpdateSKU(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateSKUResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateSKUArgs() interface{} {
	return &UpdateSKUArgs{}
}

func newUpdateSKUResult() interface{} {
	return &UpdateSKUResult{}
}

type UpdateSKUArgs struct {
	Req *product.UpdateSKUReq
}

func (p *UpdateSKUArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateSKUReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateSKUArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateSKUArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateSKUArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateSKUArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateSKUReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateSKUArgs_Req_DEFAULT *product.UpdateSKUReq

func (p *UpdateSKUArgs) GetReq() *product.UpdateSKUReq {
	if !p.IsSetReq() {
		return UpdateSKUArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateSKUArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateSKUArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateSKUResult struct {
	Success *product.UpdateSKUResp
}

var UpdateSKUResult_Success_DEFAULT *product.UpdateSKUResp

func (p *UpdateSKUResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateSKUResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateSKUResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateSKUResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateSKUResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateSKUResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateSKUResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateSKUResult) GetSuccess() *product.UpdateSKUResp {
	if !p.IsSetSuccess() {
		return UpdateSKUResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateSKUResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateSKUResp)
}

func (p *UpdateSKUResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSKUResult) GetResult() interface{} {
	return p.Success
}

func deleteSKUHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.DeleteSKUReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).DeleteSKU(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteSKUArgs:
		success, err := handler.(product.ProductService).DeleteSKU(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteSKUResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteSKUArgs() interface{} {
	return &DeleteSKUArgs{}
}

func newDeleteSKUResult() interface{} {
	return &DeleteSKUResult{}
}

type DeleteSKUArgs struct {
	Req *product.DeleteSKUReq
}

func (p *DeleteSKUArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.DeleteSKUReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteSKUArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteSKUArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteSKUArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteSKUArgs) Unmarshal(in []byte) error {
	msg := new(product.DeleteSKUReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteSKUArgs_Req_DEFAULT *product.DeleteSKUReq

func (p *DeleteSKUArgs) GetReq() *product.DeleteSKUReq {
	if !p.IsSetReq() {
		return DeleteSKUArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteSKUArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteSKUArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteSKUResult struct {
	Success *product.DeleteSKUResp
}

var DeleteSKUResult_Success_DEFAULT *product.DeleteSKUResp

func (p *DeleteSKUResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.DeleteSKUResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteSKUResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteSKUResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteSKUResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteSKUResult) Unmarshal(in []byte) error {
	msg := new(product.DeleteSKUResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteSKUResult) GetSuccess() *product.DeleteSKUResp {
	if !p.IsSetSuccess() {
		return DeleteSKUResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteSKUResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.DeleteSKUResp)
}

func (p *DeleteSKUResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteSKUResult) GetResult() interface{} {
	return p.Success
}

func updateSKUStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateSKUStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).UpdateSKUStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateSKUStockArgs:
		success, err := handler.(product.ProductService).UpdateSKUStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateSKUStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateSKUStockArgs() interface{} {
	return &UpdateSKUStockArgs{}
}

func newUpdateSKUStockResult() interface{} {
	return &UpdateSKUStockResult{}
}

type UpdateSKUStockArgs struct {
	Req *product.UpdateSKUStockReq
}

func (p *UpdateSKUStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateSKUStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateSKUStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateSKUStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateSKUStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateSKUStockArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateSKUStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateSKUStockArgs_Req_DEFAULT *product.UpdateSKUStockReq

func (p *UpdateSKUStockArgs) GetReq() *product.UpdateSKUStockReq {
	if !p.IsSetReq() {
		return UpdateSKUStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateSKUStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateSKUStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateSKUStockResult struct {
	Success *product.UpdateSKUStockResp
}

var UpdateSKUStockResult_Success_DEFAULT *product.UpdateSKUStockResp

func (p *UpdateSKUStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateSKUStockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateSKUStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateSKUStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateSKUStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateSKUStockResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateSKUStockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateSKUStockResult) GetSuccess() *product.UpdateSKUStockResp {
	if !p.IsSetSuccess() {
		return UpdateSKUStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateSKUStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateSKUStockResp)
}

func (p *UpdateSKUStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateSKUStockResult) GetResult() interface{} {
	return p.Success
}

func createCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.CreateCategoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).CreateCategory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateCategoryArgs:
		success, err := handler.(product.ProductService).CreateCategory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateCategoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateCategoryArgs() interface{} {
	return &CreateCategoryArgs{}
}

func newCreateCategoryResult() interface{} {
	return &CreateCategoryResult{}
}

type CreateCategoryArgs struct {
	Req *product.CreateCategoryReq
}

func (p *CreateCategoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.CreateCategoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateCategoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateCategoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateCategoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateCategoryArgs) Unmarshal(in []byte) error {
	msg := new(product.CreateCategoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateCategoryArgs_Req_DEFAULT *product.CreateCategoryReq

func (p *CreateCategoryArgs) GetReq() *product.CreateCategoryReq {
	if !p.IsSetReq() {
		return CreateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateCategoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateCategoryResult struct {
	Success *product.CreateCategoryResp
}

var CreateCategoryResult_Success_DEFAULT *product.CreateCategoryResp

func (p *CreateCategoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.CreateCategoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateCategoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateCategoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateCategoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateCategoryResult) Unmarshal(in []byte) error {
	msg := new(product.CreateCategoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateCategoryResult) GetSuccess() *product.CreateCategoryResp {
	if !p.IsSetSuccess() {
		return CreateCategoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.CreateCategoryResp)
}

func (p *CreateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateCategoryResult) GetResult() interface{} {
	return p.Success
}

func updateCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateCategoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).UpdateCategory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateCategoryArgs:
		success, err := handler.(product.ProductService).UpdateCategory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateCategoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateCategoryArgs() interface{} {
	return &UpdateCategoryArgs{}
}

func newUpdateCategoryResult() interface{} {
	return &UpdateCategoryResult{}
}

type UpdateCategoryArgs struct {
	Req *product.UpdateCategoryReq
}

func (p *UpdateCategoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateCategoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateCategoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateCategoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateCategoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateCategoryArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateCategoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateCategoryArgs_Req_DEFAULT *product.UpdateCategoryReq

func (p *UpdateCategoryArgs) GetReq() *product.UpdateCategoryReq {
	if !p.IsSetReq() {
		return UpdateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateCategoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateCategoryResult struct {
	Success *product.UpdateCategoryResp
}

var UpdateCategoryResult_Success_DEFAULT *product.UpdateCategoryResp

func (p *UpdateCategoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateCategoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateCategoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateCategoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateCategoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateCategoryResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateCategoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateCategoryResult) GetSuccess() *product.UpdateCategoryResp {
	if !p.IsSetSuccess() {
		return UpdateCategoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateCategoryResp)
}

func (p *UpdateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateCategoryResult) GetResult() interface{} {
	return p.Success
}

func deleteCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.DeleteCategoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).DeleteCategory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteCategoryArgs:
		success, err := handler.(product.ProductService).DeleteCategory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteCategoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteCategoryArgs() interface{} {
	return &DeleteCategoryArgs{}
}

func newDeleteCategoryResult() interface{} {
	return &DeleteCategoryResult{}
}

type DeleteCategoryArgs struct {
	Req *product.DeleteCategoryReq
}

func (p *DeleteCategoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.DeleteCategoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteCategoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteCategoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteCategoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteCategoryArgs) Unmarshal(in []byte) error {
	msg := new(product.DeleteCategoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteCategoryArgs_Req_DEFAULT *product.DeleteCategoryReq

func (p *DeleteCategoryArgs) GetReq() *product.DeleteCategoryReq {
	if !p.IsSetReq() {
		return DeleteCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteCategoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteCategoryResult struct {
	Success *product.DeleteCategoryResp
}

var DeleteCategoryResult_Success_DEFAULT *product.DeleteCategoryResp

func (p *DeleteCategoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.DeleteCategoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteCategoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteCategoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteCategoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteCategoryResult) Unmarshal(in []byte) error {
	msg := new(product.DeleteCategoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteCategoryResult) GetSuccess() *product.DeleteCategoryResp {
	if !p.IsSetSuccess() {
		return DeleteCategoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.DeleteCategoryResp)
}

func (p *DeleteCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteCategoryResult) GetResult() interface{} {
	return p.Success
}

func listCategoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.ListCategoriesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).ListCategories(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListCategoriesArgs:
		success, err := handler.(product.ProductService).ListCategories(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListCategoriesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListCategoriesArgs() interface{} {
	return &ListCategoriesArgs{}
}

func newListCategoriesResult() interface{} {
	return &ListCategoriesResult{}
}

type ListCategoriesArgs struct {
	Req *product.ListCategoriesReq
}

func (p *ListCategoriesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.ListCategoriesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListCategoriesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListCategoriesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListCategoriesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListCategoriesArgs) Unmarshal(in []byte) error {
	msg := new(product.ListCategoriesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListCategoriesArgs_Req_DEFAULT *product.ListCategoriesReq

func (p *ListCategoriesArgs) GetReq() *product.ListCategoriesReq {
	if !p.IsSetReq() {
		return ListCategoriesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListCategoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListCategoriesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListCategoriesResult struct {
	Success *product.ListCategoriesResp
}

var ListCategoriesResult_Success_DEFAULT *product.ListCategoriesResp

func (p *ListCategoriesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.ListCategoriesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListCategoriesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListCategoriesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListCategoriesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListCategoriesResult) Unmarshal(in []byte) error {
	msg := new(product.ListCategoriesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListCategoriesResult) GetSuccess() *product.ListCategoriesResp {
	if !p.IsSetSuccess() {
		return ListCategoriesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListCategoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.ListCategoriesResp)
}

func (p *ListCategoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListCategoriesResult) GetResult() interface{} {
	return p.Success
}

func getCategoryTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetCategoryTreeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).GetCategoryTree(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetCategoryTreeArgs:
		success, err := handler.(product.ProductService).GetCategoryTree(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCategoryTreeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetCategoryTreeArgs() interface{} {
	return &GetCategoryTreeArgs{}
}

func newGetCategoryTreeResult() interface{} {
	return &GetCategoryTreeResult{}
}

type GetCategoryTreeArgs struct {
	Req *product.GetCategoryTreeReq
}

func (p *GetCategoryTreeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetCategoryTreeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCategoryTreeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCategoryTreeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCategoryTreeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCategoryTreeArgs) Unmarshal(in []byte) error {
	msg := new(product.GetCategoryTreeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCategoryTreeArgs_Req_DEFAULT *product.GetCategoryTreeReq

func (p *GetCategoryTreeArgs) GetReq() *product.GetCategoryTreeReq {
	if !p.IsSetReq() {
		return GetCategoryTreeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCategoryTreeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCategoryTreeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCategoryTreeResult struct {
	Success *product.GetCategoryTreeResp
}

var GetCategoryTreeResult_Success_DEFAULT *product.GetCategoryTreeResp

func (p *GetCategoryTreeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetCategoryTreeResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCategoryTreeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCategoryTreeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCategoryTreeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCategoryTreeResult) Unmarshal(in []byte) error {
	msg := new(product.GetCategoryTreeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCategoryTreeResult) GetSuccess() *product.GetCategoryTreeResp {
	if !p.IsSetSuccess() {
		return GetCategoryTreeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCategoryTreeResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetCategoryTreeResp)
}

func (p *GetCategoryTreeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCategoryTreeResult) GetResult() interface{} {
	return p.Success
}

func searchProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.SearchProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).SearchProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchProductsArgs:
		success, err := handler.(product.ProductService).SearchProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchProductsArgs() interface{} {
	return &SearchProductsArgs{}
}

func newSearchProductsResult() interface{} {
	return &SearchProductsResult{}
}

type SearchProductsArgs struct {
	Req *product.SearchProductsReq
}

func (p *SearchProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.SearchProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.SearchProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchProductsArgs_Req_DEFAULT *product.SearchProductsReq

func (p *SearchProductsArgs) GetReq() *product.SearchProductsReq {
	if !p.IsSetReq() {
		return SearchProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchProductsResult struct {
	Success *product.SearchProductsResp
}

var SearchProductsResult_Success_DEFAULT *product.SearchProductsResp

func (p *SearchProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.SearchProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchProductsResult) Unmarshal(in []byte) error {
	msg := new(product.SearchProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchProductsResult) GetSuccess() *product.SearchProductsResp {
	if !p.IsSetSuccess() {
		return SearchProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.SearchProductsResp)
}

func (p *SearchProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchProductsResult) GetResult() interface{} {
	return p.Success
}

func getProductsByCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetProductsByCategoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).GetProductsByCategory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetProductsByCategoryArgs:
		success, err := handler.(product.ProductService).GetProductsByCategory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductsByCategoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetProductsByCategoryArgs() interface{} {
	return &GetProductsByCategoryArgs{}
}

func newGetProductsByCategoryResult() interface{} {
	return &GetProductsByCategoryResult{}
}

type GetProductsByCategoryArgs struct {
	Req *product.GetProductsByCategoryReq
}

func (p *GetProductsByCategoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetProductsByCategoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductsByCategoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductsByCategoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductsByCategoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductsByCategoryArgs) Unmarshal(in []byte) error {
	msg := new(product.GetProductsByCategoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductsByCategoryArgs_Req_DEFAULT *product.GetProductsByCategoryReq

func (p *GetProductsByCategoryArgs) GetReq() *product.GetProductsByCategoryReq {
	if !p.IsSetReq() {
		return GetProductsByCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductsByCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductsByCategoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductsByCategoryResult struct {
	Success *product.GetProductsByCategoryResp
}

var GetProductsByCategoryResult_Success_DEFAULT *product.GetProductsByCategoryResp

func (p *GetProductsByCategoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetProductsByCategoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductsByCategoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductsByCategoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductsByCategoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductsByCategoryResult) Unmarshal(in []byte) error {
	msg := new(product.GetProductsByCategoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductsByCategoryResult) GetSuccess() *product.GetProductsByCategoryResp {
	if !p.IsSetSuccess() {
		return GetProductsByCategoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductsByCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetProductsByCategoryResp)
}

func (p *GetProductsByCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductsByCategoryResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateProduct(ctx context.Context, Req *product.CreateProductReq) (r *product.CreateProductResp, err error) {
	var _args CreateProductArgs
	_args.Req = Req
	var _result CreateProductResult
	if err = p.c.Call(ctx, "CreateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *product.UpdateProductReq) (r *product.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, Req *product.GetProductReq) (r *product.GetProductResp, err error) {
	var _args GetProductArgs
	_args.Req = Req
	var _result GetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListProducts(ctx context.Context, Req *product.ListProductsReq) (r *product.ListProductsResp, err error) {
	var _args ListProductsArgs
	_args.Req = Req
	var _result ListProductsResult
	if err = p.c.Call(ctx, "ListProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *product.DeleteProductReq) (r *product.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProductStatus(ctx context.Context, Req *product.UpdateProductStatusReq) (r *product.UpdateProductStatusResp, err error) {
	var _args UpdateProductStatusArgs
	_args.Req = Req
	var _result UpdateProductStatusResult
	if err = p.c.Call(ctx, "UpdateProductStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSKU(ctx context.Context, Req *product.CreateSKUReq) (r *product.CreateSKUResp, err error) {
	var _args CreateSKUArgs
	_args.Req = Req
	var _result CreateSKUResult
	if err = p.c.Call(ctx, "CreateSKU", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSKU(ctx context.Context, Req *product.UpdateSKUReq) (r *product.UpdateSKUResp, err error) {
	var _args UpdateSKUArgs
	_args.Req = Req
	var _result UpdateSKUResult
	if err = p.c.Call(ctx, "UpdateSKU", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSKU(ctx context.Context, Req *product.DeleteSKUReq) (r *product.DeleteSKUResp, err error) {
	var _args DeleteSKUArgs
	_args.Req = Req
	var _result DeleteSKUResult
	if err = p.c.Call(ctx, "DeleteSKU", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSKUStock(ctx context.Context, Req *product.UpdateSKUStockReq) (r *product.UpdateSKUStockResp, err error) {
	var _args UpdateSKUStockArgs
	_args.Req = Req
	var _result UpdateSKUStockResult
	if err = p.c.Call(ctx, "UpdateSKUStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCategory(ctx context.Context, Req *product.CreateCategoryReq) (r *product.CreateCategoryResp, err error) {
	var _args CreateCategoryArgs
	_args.Req = Req
	var _result CreateCategoryResult
	if err = p.c.Call(ctx, "CreateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategory(ctx context.Context, Req *product.UpdateCategoryReq) (r *product.UpdateCategoryResp, err error) {
	var _args UpdateCategoryArgs
	_args.Req = Req
	var _result UpdateCategoryResult
	if err = p.c.Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategory(ctx context.Context, Req *product.DeleteCategoryReq) (r *product.DeleteCategoryResp, err error) {
	var _args DeleteCategoryArgs
	_args.Req = Req
	var _result DeleteCategoryResult
	if err = p.c.Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCategories(ctx context.Context, Req *product.ListCategoriesReq) (r *product.ListCategoriesResp, err error) {
	var _args ListCategoriesArgs
	_args.Req = Req
	var _result ListCategoriesResult
	if err = p.c.Call(ctx, "ListCategories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategoryTree(ctx context.Context, Req *product.GetCategoryTreeReq) (r *product.GetCategoryTreeResp, err error) {
	var _args GetCategoryTreeArgs
	_args.Req = Req
	var _result GetCategoryTreeResult
	if err = p.c.Call(ctx, "GetCategoryTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProducts(ctx context.Context, Req *product.SearchProductsReq) (r *product.SearchProductsResp, err error) {
	var _args SearchProductsArgs
	_args.Req = Req
	var _result SearchProductsResult
	if err = p.c.Call(ctx, "SearchProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductsByCategory(ctx context.Context, Req *product.GetProductsByCategoryReq) (r *product.GetProductsByCategoryResp, err error) {
	var _args GetProductsByCategoryArgs
	_args.Req = Req
	var _result GetProductsByCategoryResult
	if err = p.c.Call(ctx, "GetProductsByCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
