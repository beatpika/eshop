// Code generated by Kitex v0.9.1. DO NOT EDIT.

package productservice

import (
	"context"
	product "github.com/beatpika/eshop/rpc_gen/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateProduct(ctx context.Context, Req *product.CreateProductReq, callOptions ...callopt.Option) (r *product.CreateProductResp, err error)
	UpdateProduct(ctx context.Context, Req *product.UpdateProductReq, callOptions ...callopt.Option) (r *product.UpdateProductResp, err error)
	GetProduct(ctx context.Context, Req *product.GetProductReq, callOptions ...callopt.Option) (r *product.GetProductResp, err error)
	ListProducts(ctx context.Context, Req *product.ListProductsReq, callOptions ...callopt.Option) (r *product.ListProductsResp, err error)
	DeleteProduct(ctx context.Context, Req *product.DeleteProductReq, callOptions ...callopt.Option) (r *product.DeleteProductResp, err error)
	UpdateProductStatus(ctx context.Context, Req *product.UpdateProductStatusReq, callOptions ...callopt.Option) (r *product.UpdateProductStatusResp, err error)
	CreateSKU(ctx context.Context, Req *product.CreateSKUReq, callOptions ...callopt.Option) (r *product.CreateSKUResp, err error)
	UpdateSKU(ctx context.Context, Req *product.UpdateSKUReq, callOptions ...callopt.Option) (r *product.UpdateSKUResp, err error)
	DeleteSKU(ctx context.Context, Req *product.DeleteSKUReq, callOptions ...callopt.Option) (r *product.DeleteSKUResp, err error)
	UpdateSKUStock(ctx context.Context, Req *product.UpdateSKUStockReq, callOptions ...callopt.Option) (r *product.UpdateSKUStockResp, err error)
	CreateCategory(ctx context.Context, Req *product.CreateCategoryReq, callOptions ...callopt.Option) (r *product.CreateCategoryResp, err error)
	UpdateCategory(ctx context.Context, Req *product.UpdateCategoryReq, callOptions ...callopt.Option) (r *product.UpdateCategoryResp, err error)
	DeleteCategory(ctx context.Context, Req *product.DeleteCategoryReq, callOptions ...callopt.Option) (r *product.DeleteCategoryResp, err error)
	ListCategories(ctx context.Context, Req *product.ListCategoriesReq, callOptions ...callopt.Option) (r *product.ListCategoriesResp, err error)
	GetCategoryTree(ctx context.Context, Req *product.GetCategoryTreeReq, callOptions ...callopt.Option) (r *product.GetCategoryTreeResp, err error)
	SearchProducts(ctx context.Context, Req *product.SearchProductsReq, callOptions ...callopt.Option) (r *product.SearchProductsResp, err error)
	GetProductsByCategory(ctx context.Context, Req *product.GetProductsByCategoryReq, callOptions ...callopt.Option) (r *product.GetProductsByCategoryResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kProductServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kProductServiceClient struct {
	*kClient
}

func (p *kProductServiceClient) CreateProduct(ctx context.Context, Req *product.CreateProductReq, callOptions ...callopt.Option) (r *product.CreateProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateProduct(ctx, Req)
}

func (p *kProductServiceClient) UpdateProduct(ctx context.Context, Req *product.UpdateProductReq, callOptions ...callopt.Option) (r *product.UpdateProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProduct(ctx, Req)
}

func (p *kProductServiceClient) GetProduct(ctx context.Context, Req *product.GetProductReq, callOptions ...callopt.Option) (r *product.GetProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProduct(ctx, Req)
}

func (p *kProductServiceClient) ListProducts(ctx context.Context, Req *product.ListProductsReq, callOptions ...callopt.Option) (r *product.ListProductsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListProducts(ctx, Req)
}

func (p *kProductServiceClient) DeleteProduct(ctx context.Context, Req *product.DeleteProductReq, callOptions ...callopt.Option) (r *product.DeleteProductResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteProduct(ctx, Req)
}

func (p *kProductServiceClient) UpdateProductStatus(ctx context.Context, Req *product.UpdateProductStatusReq, callOptions ...callopt.Option) (r *product.UpdateProductStatusResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateProductStatus(ctx, Req)
}

func (p *kProductServiceClient) CreateSKU(ctx context.Context, Req *product.CreateSKUReq, callOptions ...callopt.Option) (r *product.CreateSKUResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateSKU(ctx, Req)
}

func (p *kProductServiceClient) UpdateSKU(ctx context.Context, Req *product.UpdateSKUReq, callOptions ...callopt.Option) (r *product.UpdateSKUResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSKU(ctx, Req)
}

func (p *kProductServiceClient) DeleteSKU(ctx context.Context, Req *product.DeleteSKUReq, callOptions ...callopt.Option) (r *product.DeleteSKUResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteSKU(ctx, Req)
}

func (p *kProductServiceClient) UpdateSKUStock(ctx context.Context, Req *product.UpdateSKUStockReq, callOptions ...callopt.Option) (r *product.UpdateSKUStockResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateSKUStock(ctx, Req)
}

func (p *kProductServiceClient) CreateCategory(ctx context.Context, Req *product.CreateCategoryReq, callOptions ...callopt.Option) (r *product.CreateCategoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCategory(ctx, Req)
}

func (p *kProductServiceClient) UpdateCategory(ctx context.Context, Req *product.UpdateCategoryReq, callOptions ...callopt.Option) (r *product.UpdateCategoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateCategory(ctx, Req)
}

func (p *kProductServiceClient) DeleteCategory(ctx context.Context, Req *product.DeleteCategoryReq, callOptions ...callopt.Option) (r *product.DeleteCategoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCategory(ctx, Req)
}

func (p *kProductServiceClient) ListCategories(ctx context.Context, Req *product.ListCategoriesReq, callOptions ...callopt.Option) (r *product.ListCategoriesResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListCategories(ctx, Req)
}

func (p *kProductServiceClient) GetCategoryTree(ctx context.Context, Req *product.GetCategoryTreeReq, callOptions ...callopt.Option) (r *product.GetCategoryTreeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCategoryTree(ctx, Req)
}

func (p *kProductServiceClient) SearchProducts(ctx context.Context, Req *product.SearchProductsReq, callOptions ...callopt.Option) (r *product.SearchProductsResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchProducts(ctx, Req)
}

func (p *kProductServiceClient) GetProductsByCategory(ctx context.Context, Req *product.GetProductsByCategoryReq, callOptions ...callopt.Option) (r *product.GetProductsByCategoryResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetProductsByCategory(ctx, Req)
}
